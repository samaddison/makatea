{
    "contexts": {
      "spring-boot-demo-app": {
        "positiveMatches": {
          "SpringBootAdminClientAutoConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            },
            {
              "condition": "SpringBootAdminClientEnabledCondition",
              "message": "matched"
            }
          ],
          "SpringBootAdminClientAutoConfiguration#registrationListener": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: de.codecentric.boot.admin.client.registration.RegistrationApplicationListener; SearchStrategy: all) did not find any beans"
            }
          ],
          "SpringBootAdminClientAutoConfiguration#registrator": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: de.codecentric.boot.admin.client.registration.ApplicationRegistrator; SearchStrategy: all) did not find any beans"
            }
          ],
          "SpringBootAdminClientAutoConfiguration#startupDateMetadataContributor": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: de.codecentric.boot.admin.client.registration.metadata.StartupDateMetadataContributor; SearchStrategy: all) did not find any beans"
            }
          ],
          "SpringBootAdminClientAutoConfiguration.BlockingRegistrationClientConfig": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) found bean 'restTemplateBuilder'"
            }
          ],
          "SpringBootAdminClientAutoConfiguration.RestClientRegistrationClientConfig": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.client.RestClient$Builder; SearchStrategy: all) found bean 'restClientBuilder'"
            }
          ],
          "SpringBootAdminClientAutoConfiguration.RestClientRegistrationClientConfig#registrationClient": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: de.codecentric.boot.admin.client.registration.RegistrationClient; SearchStrategy: all) did not find any beans"
            }
          ],
          "SpringBootAdminClientAutoConfiguration.ServletConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "SpringBootAdminClientAutoConfiguration.ServletConfiguration#applicationFactory": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: de.codecentric.boot.admin.client.registration.ApplicationFactory; SearchStrategy: all) did not find any beans"
            }
          ],
          "SpringNativeClientAutoConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            },
            {
              "condition": "SpringBootAdminClientEnabledCondition",
              "message": "matched"
            }
          ],
          "AuditAutoConfiguration": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.auditevents.enabled) matched"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found bean 'auditEventRepository'"
            }
          ],
          "AuditAutoConfiguration#auditListener": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.listener.AbstractAuditListener; SearchStrategy: all) did not find any beans"
            }
          ],
          "AuditEventsEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "AuditEventsEndpointAutoConfiguration#auditEventsEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found bean 'auditEventRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventsEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "BeansEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "BeansEndpointAutoConfiguration#beansEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "CachesEndpointAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'"
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "CachesEndpointAutoConfiguration#cachesEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "CachesEndpointAutoConfiguration#cachesEndpointWebExtension": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) found bean 'cachesEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpointWebExtension; SearchStrategy: all) did not find any beans"
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "ConditionsReportEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "ConditionsReportEndpointAutoConfiguration#conditionsReportEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint; SearchStrategy: current) did not find any beans"
            }
          ],
          "ConfigurationPropertiesReportEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpointWebExtension": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) found bean 'configurationPropertiesReportEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpointWebExtension; SearchStrategy: all) did not find any beans"
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "EndpointAutoConfiguration#endpointCachingOperationInvokerAdvisor": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor; SearchStrategy: all) did not find any beans"
            }
          ],
          "EndpointAutoConfiguration#endpointOperationParameterMapper": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper; SearchStrategy: all) did not find any beans"
            }
          ],
          "EndpointAutoConfiguration#propertiesEndpointAccessResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.EndpointAccessResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "JacksonEndpointAutoConfiguration#endpointObjectMapper": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.endpoints.jackson.isolated-object-mapper) matched"
            }
          ],
          "JmxEndpointAutoConfiguration": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
            }
          ],
          "JmxEndpointAutoConfiguration#endpointObjectNameFactory": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.EndpointObjectNameFactory; SearchStrategy: current) did not find any beans"
            }
          ],
          "JmxEndpointAutoConfiguration#jmxAnnotationEndpointDiscoverer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.JmxEndpointsSupplier; SearchStrategy: all) did not find any beans"
            }
          ],
          "JmxEndpointAutoConfiguration#jmxMBeanExporter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate (types: javax.management.MBeanServer; SearchStrategy: all) found a single bean 'mbeanServer'"
            }
          ],
          "ServletEndpointManagementContextConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
            }
          ],
          "WebEndpointAutoConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            }
          ],
          "WebEndpointAutoConfiguration#controllerEndpointDiscoverer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebEndpointAutoConfiguration#endpointMediaTypes": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebEndpointAutoConfiguration#pathMappedEndpoints": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebEndpointAutoConfiguration#webEndpointDiscoverer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebEndpointAutoConfiguration.WebEndpointServletConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "WebEndpointAutoConfiguration.WebEndpointServletConfiguration#servletEndpointDiscoverer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcEndpointManagementContextConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) found beans 'webEndpointDiscoverer', 'dispatcherServlet'"
            }
          ],
          "WebMvcEndpointManagementContextConfiguration#controllerEndpointHandlerMapping": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.ControllerEndpointHandlerMapping; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcEndpointManagementContextConfiguration#endpointObjectMapperWebMvcConfigurer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.endpoint.jackson.EndpointObjectMapper; SearchStrategy: all) found bean 'endpointObjectMapper'"
            }
          ],
          "WebMvcEndpointManagementContextConfiguration#webEndpointServletHandlerMapping": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping; SearchStrategy: all) did not find any beans"
            }
          ],
          "EnvironmentEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "EnvironmentEndpointAutoConfiguration#environmentEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "EnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) found bean 'environmentEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension; SearchStrategy: all) did not find any beans"
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "HealthContributorAutoConfiguration#pingHealthContributor": [
            {
              "condition": "OnEnabledHealthIndicatorCondition",
              "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
            }
          ],
          "HealthEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "HealthEndpointConfiguration#healthContributorRegistry": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthContributorRegistry; SearchStrategy: all) did not find any beans"
            }
          ],
          "HealthEndpointConfiguration#healthEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "HealthEndpointConfiguration#healthEndpointGroupMembershipValidator": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.endpoint.health.validate-group-membership=true) matched"
            }
          ],
          "HealthEndpointConfiguration#healthEndpointGroups": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointGroups; SearchStrategy: all) did not find any beans"
            }
          ],
          "HealthEndpointConfiguration#healthHttpCodeStatusMapper": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HttpCodeStatusMapper; SearchStrategy: all) did not find any beans"
            }
          ],
          "HealthEndpointConfiguration#healthStatusAggregator": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.StatusAggregator; SearchStrategy: all) did not find any beans"
            }
          ],
          "HealthEndpointWebExtensionConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'"
            }
          ],
          "HealthEndpointWebExtensionConfiguration#healthEndpointWebExtension": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointWebExtension; SearchStrategy: all) did not find any beans"
            }
          ],
          "HealthEndpointWebExtensionConfiguration.MvcAdditionalHealthEndpointPathsConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
            }
          ],
          "ReactiveHealthEndpointConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'reactor.core.publisher.Flux'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'"
            }
          ],
          "ReactiveHealthEndpointConfiguration#reactiveHealthContributorRegistry": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry; SearchStrategy: all) did not find any beans"
            }
          ],
          "InfoContributorAutoConfiguration#buildInfoContributor": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) found a single bean 'buildProperties'"
            }
          ],
          "InfoContributorAutoConfiguration#envInfoContributor": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.env.enabled is true"
            }
          ],
          "InfoContributorAutoConfiguration#gitInfoContributor": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) found a single bean 'gitProperties'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.GitInfoContributor; SearchStrategy: all) did not find any beans"
            }
          ],
          "InfoContributorAutoConfiguration#javaInfoContributor": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.java.enabled is true"
            }
          ],
          "InfoContributorAutoConfiguration#osInfoContributor": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.os.enabled is true"
            }
          ],
          "InfoContributorAutoConfiguration#processInfoContributor": [
            {
              "condition": "OnEnabledInfoContributorCondition",
              "message": "@ConditionalOnEnabledInfoContributor management.info.process.enabled is true"
            }
          ],
          "InfoEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "InfoEndpointAutoConfiguration#infoEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.InfoEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "LogFileWebEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "LogFileWebEndpointAutoConfiguration#logFileWebEndpoint": [
            {
              "condition": "LogFileWebEndpointAutoConfiguration.LogFileCondition",
              "message": "Log File found logging.file.name /tmp/myapp.log"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LogFileWebEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "LoggersEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "LoggersEndpointAutoConfiguration#loggersEndpoint": [
            {
              "condition": "LoggersEndpointAutoConfiguration.OnEnabledLoggingSystemCondition",
              "message": "Logging System enabled"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LoggersEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "HeapDumpWebEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "HeapDumpWebEndpointAutoConfiguration#heapDumpWebEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.HeapDumpWebEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "ThreadDumpEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "ThreadDumpEndpointAutoConfiguration#dumpEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.ThreadDumpEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "CompositeMeterRegistryAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.composite.CompositeMeterRegistry'"
            }
          ],
          "JvmMetricsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
            }
          ],
          "JvmMetricsAutoConfiguration#classLoaderMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "JvmMetricsAutoConfiguration#jvmCompilationMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmCompilationMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "JvmMetricsAutoConfiguration#jvmGcMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmGcMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "JvmMetricsAutoConfiguration#jvmHeapPressureMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmHeapPressureMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "JvmMetricsAutoConfiguration#jvmInfoMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmInfoMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "JvmMetricsAutoConfiguration#jvmMemoryMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "JvmMetricsAutoConfiguration#jvmThreadMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "LogbackMetricsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.MeterRegistry', 'ch.qos.logback.classic.LoggerContext', 'org.slf4j.LoggerFactory'"
            },
            {
              "condition": "LogbackMetricsAutoConfiguration.LogbackLoggingCondition",
              "message": "LogbackLoggingCondition ILoggerFactory is a Logback LoggerContext"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
            }
          ],
          "LogbackMetricsAutoConfiguration#logbackMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.logging.LogbackMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "MetricsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'"
            }
          ],
          "MetricsAutoConfiguration#micrometerClock": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) did not find any beans"
            }
          ],
          "MetricsEndpointAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'"
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "MetricsEndpointAutoConfiguration#metricsEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.MetricsEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "SystemMetricsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
            }
          ],
          "SystemMetricsAutoConfiguration#diskSpaceMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.system.DiskSpaceMetricsBinder; SearchStrategy: all) did not find any beans"
            }
          ],
          "SystemMetricsAutoConfiguration#fileDescriptorMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.FileDescriptorMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "SystemMetricsAutoConfiguration#processorMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.ProcessorMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "SystemMetricsAutoConfiguration#uptimeMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.UptimeMetrics; SearchStrategy: all) did not find any beans"
            }
          ],
          "CacheMeterBinderProvidersConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.MeterBinder'"
            }
          ],
          "CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.cache.caffeine.CaffeineCache', 'com.github.benmanes.caffeine.cache.Cache'"
            }
          ],
          "CacheMetricsAutoConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) found bean 'cacheManager'"
            }
          ],
          "CacheMetricsRegistrarConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans 'caffeineCacheMeterBinderProvider', 'simpleMeterRegistry'"
            }
          ],
          "RepositoryMetricsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.data.repository.Repository'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
            }
          ],
          "RepositoryMetricsAutoConfiguration#metricsRepositoryMethodInvocationListener": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.data.MetricsRepositoryMethodInvocationListener; SearchStrategy: all) did not find any beans"
            }
          ],
          "RepositoryMetricsAutoConfiguration#repositoryTagsProvider": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.data.RepositoryTagsProvider; SearchStrategy: all) did not find any beans"
            }
          ],
          "SimpleMetricsExportAutoConfiguration": [
            {
              "condition": "OnMetricsExportEnabledCondition",
              "message": "@ConditionalOnEnabledMetricsExport management.defaults.metrics.export.enabled is considered true"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) found bean 'micrometerClock'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans"
            }
          ],
          "SimpleMetricsExportAutoConfiguration#simpleConfig": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.simple.SimpleConfig; SearchStrategy: all) did not find any beans"
            }
          ],
          "StartupTimeMetricsListenerAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
            }
          ],
          "StartupTimeMetricsListenerAutoConfiguration#startupTimeMetrics": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.startup.StartupTimeMetricsListener; SearchStrategy: all) did not find any beans"
            }
          ],
          "TaskExecutorMetricsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: java.util.concurrent.Executor,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans 'applicationTaskExecutor', 'simpleMeterRegistry', 'taskScheduler'"
            }
          ],
          "TomcatMetricsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.binder.tomcat.TomcatMetrics', 'org.apache.catalina.Manager'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            }
          ],
          "TomcatMetricsAutoConfiguration#tomcatMetricsBinder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.tomcat.TomcatMetrics,org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder; SearchStrategy: all) did not find any beans"
            }
          ],
          "ObservationAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.observation.ObservationRegistry'"
            }
          ],
          "ObservationAutoConfiguration#observationRegistry": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.observation.ObservationRegistry; SearchStrategy: all) did not find any beans"
            }
          ],
          "ObservationAutoConfiguration.MeterObservationHandlerConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.observation.MeterObservationHandler; SearchStrategy: all) did not find any beans"
            }
          ],
          "ObservationAutoConfiguration.MeterObservationHandlerConfiguration.OnlyMetricsMeterObservationHandlerConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.tracing.Tracer; SearchStrategy: all) did not find any beans"
            }
          ],
          "ObservationAutoConfiguration.OnlyMetricsConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'; @ConditionalOnMissingClass did not find unwanted class 'io.micrometer.tracing.Tracer'"
            }
          ],
          "HttpClientObservationsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.observation.Observation'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.observation.ObservationRegistry; SearchStrategy: all) found bean 'observationRegistry'"
            }
          ],
          "HttpClientObservationsAutoConfiguration.MeterFilterConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
            }
          ],
          "RestClientObservationConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestClient'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.client.RestClient$Builder; SearchStrategy: all) found bean 'restClientBuilder'"
            }
          ],
          "RestTemplateObservationConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) found bean 'restTemplateBuilder'"
            }
          ],
          "WebClientObservationConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.function.client.WebClient'"
            }
          ],
          "WebMvcObservationAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.web.servlet.DispatcherServlet', 'io.micrometer.observation.Observation'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.observation.ObservationRegistry; SearchStrategy: all) found bean 'observationRegistry'"
            }
          ],
          "WebMvcObservationAutoConfiguration#webMvcObservationFilter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.ServerHttpObservationFilter; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcObservationAutoConfiguration.MeterFilterConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'"
            }
          ],
          "SbomEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "SbomEndpointAutoConfiguration#sbomEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.sbom.SbomEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "SbomEndpointAutoConfiguration#sbomEndpointWebExtension": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.sbom.SbomEndpoint; SearchStrategy: all) found bean 'sbomEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.sbom.SbomEndpointWebExtension; SearchStrategy: all) did not find any beans"
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "ScheduledTasksEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "ScheduledTasksEndpointAutoConfiguration#scheduledTasksEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "ScheduledTasksObservabilityAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.micrometer.observation.ObservationRegistry; SearchStrategy: all) found bean 'observationRegistry'"
            }
          ],
          "SessionsEndpointAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.session.Session'"
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "SslHealthContributorAutoConfiguration": [
            {
              "condition": "OnEnabledHealthIndicatorCondition",
              "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
            }
          ],
          "SslHealthContributorAutoConfiguration#sslHealthIndicator": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: sslHealthIndicator; SearchStrategy: all) did not find any beans"
            }
          ],
          "SslHealthContributorAutoConfiguration#sslInfo": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.info.SslInfo; SearchStrategy: all) did not find any beans"
            }
          ],
          "StartupEndpointAutoConfiguration": [
            {
              "condition": "StartupEndpointAutoConfiguration.ApplicationStartupCondition",
              "message": "ApplicationStartup configured applicationStartup is of type BufferingApplicationStartup."
            },
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "StartupEndpointAutoConfiguration#startupEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.startup.StartupEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "DiskSpaceHealthContributorAutoConfiguration": [
            {
              "condition": "OnEnabledHealthIndicatorCondition",
              "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
            }
          ],
          "DiskSpaceHealthContributorAutoConfiguration#diskSpaceHealthIndicator": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: diskSpaceHealthIndicator; SearchStrategy: all) did not find any beans"
            }
          ],
          "HttpExchangesAutoConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.httpexchanges.recording.enabled) matched"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository; SearchStrategy: all) found bean 'httpTraceRepository'"
            }
          ],
          "HttpExchangesAutoConfiguration.ServletHttpExchangesConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "HttpExchangesAutoConfiguration.ServletHttpExchangesConfiguration#httpExchangesFilter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.web.exchanges.servlet.HttpExchangesFilter; SearchStrategy: all) did not find any beans"
            }
          ],
          "HttpExchangesEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "HttpExchangesEndpointAutoConfiguration#httpExchangesEndpoint": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository; SearchStrategy: all) found bean 'httpTraceRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.web.exchanges.HttpExchangesEndpoint; SearchStrategy: all) did not find any beans"
            }
          ],
          "MappingsEndpointAutoConfiguration": [
            {
              "condition": "OnAvailableEndpointCondition",
              "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
            }
          ],
          "MappingsEndpointAutoConfiguration.ServletWebConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
            }
          ],
          "ManagementContextAutoConfiguration.SameManagementContextConfiguration": [
            {
              "condition": "OnManagementPortCondition",
              "message": "Management Port actual port type (SAME) matched required type"
            }
          ],
          "ServletManagementContextAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'jakarta.servlet.Servlet'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "SpringApplicationAdminJmxAutoConfiguration": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.application.admin.enabled=true) matched"
            }
          ],
          "SpringApplicationAdminJmxAutoConfiguration#springApplicationAdminRegistrar": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar; SearchStrategy: all) did not find any beans"
            }
          ],
          "AopAutoConfiguration": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.aop.auto=true) matched"
            }
          ],
          "AopAutoConfiguration.ClassProxyingConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnMissingClass did not find unwanted class 'org.aspectj.weaver.Advice'"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=true) matched"
            }
          ],
          "ApplicationAvailabilityAutoConfiguration#applicationAvailability": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.availability.ApplicationAvailability; SearchStrategy: all) did not find any beans"
            }
          ],
          "CaffeineCacheConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'com.github.benmanes.caffeine.cache.Caffeine', 'org.springframework.cache.caffeine.CaffeineCacheManager'"
            },
            {
              "condition": "CacheCondition",
              "message": "Cache org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration automatic cache type"
            }
          ],
          "GenericCacheConfiguration": [
            {
              "condition": "CacheCondition",
              "message": "Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type"
            }
          ],
          "NoOpCacheConfiguration": [
            {
              "condition": "CacheCondition",
              "message": "Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type"
            }
          ],
          "SimpleCacheConfiguration": [
            {
              "condition": "CacheCondition",
              "message": "Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type"
            }
          ],
          "LifecycleAutoConfiguration#defaultLifecycleProcessor": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: lifecycleProcessor; SearchStrategy: current) did not find any beans"
            }
          ],
          "PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans"
            }
          ],
          "PersistenceExceptionTranslationAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor'"
            }
          ],
          "PersistenceExceptionTranslationAutoConfiguration#persistenceExceptionTranslationPostProcessor": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.dao.exceptiontranslation.enabled) matched"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor; SearchStrategy: all) did not find any beans"
            }
          ],
          "RepositoryRestMvcAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration; SearchStrategy: all) did not find any beans"
            }
          ],
          "HypermediaAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.hateoas.EntityModel', 'org.springframework.web.bind.annotation.RequestMapping', 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter', 'org.springframework.plugin.core.Plugin'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            }
          ],
          "HypermediaAutoConfiguration#applicationJsonHalConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.hateoas.use-hal-as-default-json-media-type) matched"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.hateoas.mediatype.hal.HalConfiguration; SearchStrategy: all) did not find any beans"
            }
          ],
          "HttpMessageConvertersAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter'"
            },
            {
              "condition": "HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition",
              "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication not a reactive web application"
            }
          ],
          "HttpMessageConvertersAutoConfiguration#messageConverters": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) did not find any beans"
            }
          ],
          "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter'"
            }
          ],
          "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans"
            }
          ],
          "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.mvc.converters.preferred-json-mapper=jackson) matched"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
            }
          ],
          "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter ignored: org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter,org.springframework.data.rest.webmvc.alps.AlpsJsonHttpMessageConverter; SearchStrategy: all) did not find any beans"
            }
          ],
          "HttpClientAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.http.client.ClientHttpRequestFactory'"
            },
            {
              "condition": "NotReactiveWebApplicationCondition",
              "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on NotReactiveWebApplicationCondition.ReactiveWebApplication not a reactive web application"
            }
          ],
          "HttpClientAutoConfiguration#clientHttpRequestFactoryBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.http.client.ClientHttpRequestFactoryBuilder; SearchStrategy: all) did not find any beans"
            }
          ],
          "HttpClientAutoConfiguration#clientHttpRequestFactorySettings": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.http.client.ClientHttpRequestFactorySettings; SearchStrategy: all) did not find any beans"
            }
          ],
          "CodecsAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.springframework.http.codec.CodecConfigurer', 'org.springframework.web.reactive.function.client.WebClient'"
            }
          ],
          "CodecsAutoConfiguration.JacksonCodecConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
            }
          ],
          "CodecsAutoConfiguration.JacksonCodecConfiguration#jacksonCodecCustomizer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
            }
          ],
          "ProjectInfoAutoConfiguration#buildProperties": [
            {
              "condition": "OnResourceCondition",
              "message": "@ConditionalOnResource found location ${spring.info.build.location:classpath:META-INF/build-info.properties}"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) did not find any beans"
            }
          ],
          "ProjectInfoAutoConfiguration#gitProperties": [
            {
              "condition": "ProjectInfoAutoConfiguration.GitResourceAvailableCondition",
              "message": "GitResource found git info at classpath:git.properties"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) did not find any beans"
            }
          ],
          "JacksonAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
            }
          ],
          "JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
            }
          ],
          "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
            }
          ],
          "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans"
            }
          ],
          "JacksonAutoConfiguration.JacksonObjectMapperConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
            }
          ],
          "JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans"
            }
          ],
          "JacksonAutoConfiguration.ParameterNamesModuleConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule'"
            }
          ],
          "JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans"
            }
          ],
          "JmxAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter'"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
            }
          ],
          "JmxAutoConfiguration#mbeanExporter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans"
            }
          ],
          "JmxAutoConfiguration#mbeanServer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans"
            }
          ],
          "JmxAutoConfiguration#objectNamingStrategy": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans"
            }
          ],
          "NettyAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'io.netty.util.NettyRuntime'"
            }
          ],
          "ReactorAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'reactor.core.publisher.Hooks'"
            }
          ],
          "ReactorNettyConfigurations.ReactorResourceFactoryConfiguration#reactorResourceFactory": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.http.client.ReactorResourceFactory; SearchStrategy: all) did not find any beans"
            }
          ],
          "SessionAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.session.Session'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            }
          ],
          "SessionAutoConfiguration.ServletSessionConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "SessionAutoConfiguration.ServletSessionConfiguration#cookieSerializer": [
            {
              "condition": "SessionAutoConfiguration.DefaultCookieSerializerCondition",
              "message": "AnyNestedCondition 1 matched 1 did not; NestedCondition on SessionAutoConfiguration.DefaultCookieSerializerCondition.CookieHttpSessionIdResolverAvailable found non-matching nested conditions @ConditionalOnBean (types: org.springframework.session.web.http.CookieHttpSessionIdResolver; SearchStrategy: all) did not find any beans of type org.springframework.session.web.http.CookieHttpSessionIdResolver, @ConditionalOnBean (types: org.springframework.session.web.http.CookieHttpSessionIdResolver; SearchStrategy: all) did not find any beans of type org.springframework.session.web.http.CookieHttpSessionIdResolver; NestedCondition on SessionAutoConfiguration.DefaultCookieSerializerCondition.NoComponentsAvailable @ConditionalOnMissingBean (types: org.springframework.session.web.http.HttpSessionIdResolver,org.springframework.session.web.http.CookieSerializer; SearchStrategy: all) did not find any beans"
            }
          ],
          "SessionAutoConfiguration.ServletSessionConfiguration.ServletSessionRepositoryConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.session.SessionRepository; SearchStrategy: all) did not find any beans"
            }
          ],
          "SqlInitializationAutoConfiguration": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.sql.init.enabled) matched"
            },
            {
              "condition": "SqlInitializationAutoConfiguration.SqlInitializationModeCondition",
              "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on SqlInitializationAutoConfiguration.SqlInitializationModeCondition.ModeIsNever @ConditionalOnProperty (spring.sql.init.mode=never) did not find property 'mode'"
            }
          ],
          "SslAutoConfiguration#sslBundleRegistry": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.ssl.SslBundleRegistry,org.springframework.boot.ssl.SslBundles; SearchStrategy: all) did not find any beans"
            }
          ],
          "TaskExecutionAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor'"
            }
          ],
          "TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration#simpleAsyncTaskExecutorBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.SimpleAsyncTaskExecutorBuilder; SearchStrategy: all) did not find any beans"
            },
            {
              "condition": "OnThreadingCondition",
              "message": "@ConditionalOnThreading found PLATFORM"
            }
          ],
          "TaskExecutorConfigurations.TaskExecutorConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans"
            }
          ],
          "TaskExecutorConfigurations.TaskExecutorConfiguration#applicationTaskExecutor": [
            {
              "condition": "OnThreadingCondition",
              "message": "@ConditionalOnThreading found PLATFORM"
            }
          ],
          "TaskExecutorConfigurations.ThreadPoolTaskExecutorBuilderConfiguration#threadPoolTaskExecutorBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.ThreadPoolTaskExecutorBuilder; SearchStrategy: all) did not find any beans"
            }
          ],
          "TaskSchedulingAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler'"
            }
          ],
          "TaskSchedulingAutoConfiguration#scheduledBeanLazyInitializationExcludeFilter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) found bean 'org.springframework.context.annotation.internalScheduledAnnotationProcessor'"
            }
          ],
          "TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration#simpleAsyncTaskSchedulerBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder; SearchStrategy: all) did not find any beans"
            },
            {
              "condition": "OnThreadingCondition",
              "message": "@ConditionalOnThreading found PLATFORM"
            }
          ],
          "TaskSchedulingConfigurations.TaskSchedulerConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) found bean 'org.springframework.context.annotation.internalScheduledAnnotationProcessor'; @ConditionalOnMissingBean (types: org.springframework.scheduling.TaskScheduler,java.util.concurrent.ScheduledExecutorService; SearchStrategy: all) did not find any beans"
            }
          ],
          "TaskSchedulingConfigurations.TaskSchedulerConfiguration#taskScheduler": [
            {
              "condition": "OnThreadingCondition",
              "message": "@ConditionalOnThreading found PLATFORM"
            }
          ],
          "TaskSchedulingConfigurations.ThreadPoolTaskSchedulerBuilderConfiguration#threadPoolTaskSchedulerBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.ThreadPoolTaskSchedulerBuilder; SearchStrategy: all) did not find any beans"
            }
          ],
          "TemplateEngineConfigurations.DefaultTemplateEngineConfiguration#templateEngine": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.thymeleaf.spring6.ISpringTemplateEngine; SearchStrategy: all) did not find any beans"
            }
          ],
          "ThymeleafAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.thymeleaf.templatemode.TemplateMode', 'org.thymeleaf.spring6.SpringTemplateEngine'"
            }
          ],
          "ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: defaultTemplateResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.thymeleaf.enabled) matched"
            }
          ],
          "ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.view.AbstractCachingViewResolver'"
            }
          ],
          "ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration#thymeleafViewResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: thymeleafViewResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "TransactionAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager'"
            }
          ],
          "TransactionManagerCustomizationAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager'"
            }
          ],
          "TransactionManagerCustomizationAutoConfiguration#platformTransactionManagerCustomizers": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers; SearchStrategy: all) did not find any beans"
            }
          ],
          "RestClientAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestClient'"
            },
            {
              "condition": "NotReactiveWebApplicationCondition",
              "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on NotReactiveWebApplicationCondition.ReactiveWebApplication not a reactive web application"
            }
          ],
          "RestClientAutoConfiguration#httpMessageConvertersRestClientCustomizer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.HttpMessageConvertersRestClientCustomizer; SearchStrategy: all) did not find any beans"
            }
          ],
          "RestClientAutoConfiguration#restClientBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.client.RestClient$Builder; SearchStrategy: all) did not find any beans"
            }
          ],
          "RestClientAutoConfiguration#restClientBuilderConfigurer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.RestClientBuilderConfigurer; SearchStrategy: all) did not find any beans"
            }
          ],
          "RestClientAutoConfiguration#restClientSsl": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.ssl.SslBundles; SearchStrategy: all) found bean 'sslBundleRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.RestClientSsl; SearchStrategy: all) did not find any beans"
            }
          ],
          "RestTemplateAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'"
            },
            {
              "condition": "NotReactiveWebApplicationCondition",
              "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on NotReactiveWebApplicationCondition.ReactiveWebApplication not a reactive web application"
            }
          ],
          "RestTemplateAutoConfiguration#restTemplateBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans"
            }
          ],
          "EmbeddedWebServerFactoryCustomizerAutoConfiguration": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            },
            {
              "condition": "OnWarDeploymentCondition",
              "message": "@ConditionalOnWarDeployment the application is not deployed as a WAR file."
            }
          ],
          "EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'reactor.netty.http.server.HttpServer'"
            }
          ],
          "EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol'"
            }
          ],
          "ClientHttpConnectorAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.function.client.WebClient'"
            }
          ],
          "ClientHttpConnectorAutoConfiguration#webClientHttpConnector": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.http.client.reactive.ClientHttpConnector; SearchStrategy: all) did not find any beans"
            }
          ],
          "ClientHttpConnectorAutoConfiguration#webClientHttpConnectorCustomizer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.http.client.reactive.ClientHttpConnector; SearchStrategy: all) found bean 'webClientHttpConnector'"
            }
          ],
          "ClientHttpConnectorFactoryConfiguration.ReactorNetty": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'reactor.netty.http.client.HttpClient'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactory; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebClientAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.function.client.WebClient'"
            }
          ],
          "WebClientAutoConfiguration#webClientBuilder": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.reactive.function.client.WebClient$Builder; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebClientAutoConfiguration#webClientSsl": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.ssl.SslBundles; SearchStrategy: all) found bean 'sslBundleRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientSsl; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebClientAutoConfiguration.WebClientCodecsConfiguration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.web.codec.CodecCustomizer; SearchStrategy: all) found beans 'jacksonCodecCustomizer', 'defaultCodecCustomizer'"
            }
          ],
          "WebClientAutoConfiguration.WebClientCodecsConfiguration#exchangeStrategiesCustomizer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientCodecCustomizer; SearchStrategy: all) did not find any beans"
            }
          ],
          "DispatcherServletAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "DispatcherServletAutoConfiguration.DispatcherServletConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'jakarta.servlet.ServletRegistration'"
            },
            {
              "condition": "DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition",
              "message": "Default DispatcherServlet did not find dispatcher servlet beans"
            }
          ],
          "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'jakarta.servlet.ServletRegistration'"
            },
            {
              "condition": "DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition",
              "message": "DispatcherServlet Registration did not find servlet registration bean"
            }
          ],
          "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (names: dispatcherServlet types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
            }
          ],
          "HttpEncodingAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (server.servlet.encoding.enabled) matched"
            }
          ],
          "HttpEncodingAutoConfiguration#characterEncodingFilter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans"
            }
          ],
          "MultipartAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'jakarta.servlet.MultipartConfigElement'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.servlet.multipart.enabled) matched"
            }
          ],
          "MultipartAutoConfiguration#multipartConfigElement": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: jakarta.servlet.MultipartConfigElement; SearchStrategy: all) did not find any beans"
            }
          ],
          "MultipartAutoConfiguration#multipartResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "ServletWebServerFactoryAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'jakarta.servlet.ServletRequest'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "ServletWebServerFactoryAutoConfiguration#tomcatServletWebServerFactoryCustomizer": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.apache.catalina.startup.Tomcat'"
            }
          ],
          "ServletWebServerFactoryConfiguration.EmbeddedTomcat": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol'"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.server.ServletWebServerFactory; SearchStrategy: current) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration#formContentFilter": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.mvc.formcontent.filter.enabled) matched"
            },
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.FormContentFilter; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration.EnableWebMvcConfiguration#flashMapManager": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: flashMapManager; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration.EnableWebMvcConfiguration#localeResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: localeResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration.EnableWebMvcConfiguration#themeResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: themeResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration.EnableWebMvcConfiguration#viewNameTranslator": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: viewNameTranslator; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#requestContextFilter": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.context.request.RequestContextListener,org.springframework.web.filter.RequestContextFilter; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.servlet.ViewResolver; SearchStrategy: all) found beans 'defaultViewResolver', 'beanNameViewResolver', 'mvcViewResolver'; @ConditionalOnMissingBean (names: viewResolver types: org.springframework.web.servlet.view.ContentNegotiatingViewResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "ErrorMvcAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "ErrorMvcAutoConfiguration#basicErrorController": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans"
            }
          ],
          "ErrorMvcAutoConfiguration#errorAttributes": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans"
            }
          ],
          "ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (server.error.whitelabel.enabled) matched"
            },
            {
              "condition": "ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition",
              "message": "ErrorTemplate Missing did not find error template view"
            }
          ],
          "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans"
            }
          ],
          "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans"
            }
          ],
          "WebSocketServletAutoConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'jakarta.websocket.server.ServerContainer'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ],
          "WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci'"
            }
          ],
          "WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration#websocketServletWebServerCustomizer": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (names: websocketServletWebServerCustomizer; SearchStrategy: all) did not find any beans"
            }
          ]
        },
        "negativeMatches": {
          "SpringBootAdminClientAutoConfiguration.BlockingRegistrationClientConfig#registrationClient": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: de.codecentric.boot.admin.client.registration.RegistrationClient; SearchStrategy: all) found beans of type 'de.codecentric.boot.admin.client.registration.RegistrationClient' registrationClient"
              }
            ],
            "matched": []
          },
          "SpringBootAdminClientAutoConfiguration.ReactiveConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": []
          },
          "SpringBootAdminClientAutoConfiguration.ReactiveRegistrationClientConfig": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder,org.springframework.web.client.RestClient$Builder; SearchStrategy: all) found beans of type 'org.springframework.web.client.RestClient$Builder' restClientBuilder and found beans of type 'org.springframework.boot.web.client.RestTemplateBuilder' restTemplateBuilder"
              }
            ],
            "matched": []
          },
          "SpringBootAdminClientCloudFoundryAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnCloudPlatformCondition",
                "message": "@ConditionalOnCloudPlatform did not find CLOUD_FOUNDRY"
              }
            ],
            "matched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found 'session' scope"
              },
              {
                "condition": "SpringBootAdminClientEnabledCondition",
                "message": "matched"
              }
            ]
          },
          "RabbitHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.amqp.rabbit.core.RabbitTemplate'"
              }
            ],
            "matched": []
          },
          "AuditAutoConfiguration#authenticationAuditListener": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
              }
            ],
            "matched": []
          },
          "AuditAutoConfiguration#authorizationAuditListener": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.access.event.AbstractAuthorizationEvent'"
              }
            ],
            "matched": []
          },
          "AvailabilityHealthContributorAutoConfiguration#livenessStateHealthIndicator": {
            "notMatched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (management.health.livenessstate.enabled=true) did not find property 'enabled'"
              }
            ],
            "matched": []
          },
          "AvailabilityHealthContributorAutoConfiguration#readinessStateHealthIndicator": {
            "notMatched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (management.health.readinessstate.enabled=true) did not find property 'enabled'"
              }
            ],
            "matched": []
          },
          "AvailabilityProbesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "AvailabilityProbesAutoConfiguration.ProbesCondition",
                "message": "Probes availability not running on a supported cloud platform"
              }
            ],
            "matched": []
          },
          "CassandraHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
              }
            ],
            "matched": []
          },
          "CassandraReactiveHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
              }
            ],
            "matched": []
          },
          "ReactiveCloudFoundryActuatorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": []
          },
          "CloudFoundryActuatorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnCloudPlatformCondition",
                "message": "@ConditionalOnCloudPlatform did not find CLOUD_FOUNDRY"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
              },
              {
                "condition": "OnWebApplicationCondition",
                "message": "found 'session' scope"
              },
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (management.cloudfoundry.enabled) matched"
              }
            ]
          },
          "ShutdownEndpointAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnAvailableEndpointCondition",
                "message": "@ConditionalOnAvailableEndpoint the configured access for endpoint 'shutdown' is NONE"
              }
            ],
            "matched": []
          },
          "CouchbaseHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
              }
            ],
            "matched": []
          },
          "CouchbaseReactiveHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
              }
            ],
            "matched": []
          },
          "ElasticsearchReactiveHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient'"
              }
            ],
            "matched": []
          },
          "MongoHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.MongoTemplate'"
              }
            ],
            "matched": []
          },
          "MongoReactiveHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.ReactiveMongoTemplate'"
              }
            ],
            "matched": []
          },
          "RedisHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory'"
              }
            ],
            "matched": []
          },
          "RedisReactiveHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory'"
              }
            ],
            "matched": []
          },
          "ElasticsearchRestHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient'"
              }
            ],
            "matched": []
          },
          "ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
              }
            ],
            "matched": []
          },
          "JerseyWebEndpointManagementContextConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
              }
            ],
            "matched": []
          },
          "WebFluxEndpointManagementContextConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'org.springframework.web.reactive.DispatcherHandler', 'org.springframework.http.server.reactive.HttpHandler'"
              }
            ]
          },
          "WebMvcEndpointManagementContextConfiguration#managementHealthEndpointWebMvcHandlerMapping": {
            "notMatched": [
              {
                "condition": "OnManagementPortCondition",
                "message": "Management Port actual port type (SAME) did not match required type (DIFFERENT)"
              }
            ],
            "matched": []
          },
          "FlywayEndpointAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
              }
            ],
            "matched": []
          },
          "HazelcastHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
              }
            ],
            "matched": []
          },
          "HealthEndpointReactiveWebExtensionConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": []
          },
          "HealthEndpointWebExtensionConfiguration.JerseyAdditionalHealthEndpointPathsConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
              }
            ],
            "matched": []
          },
          "InfoContributorAutoConfiguration#sslInfo": {
            "notMatched": [
              {
                "condition": "OnEnabledInfoContributorCondition",
                "message": "@ConditionalOnEnabledInfoContributor management.info.ssl.enabled is not true"
              }
            ],
            "matched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.info.SslInfo; SearchStrategy: all) did not find any beans"
              }
            ]
          },
          "InfoContributorAutoConfiguration#sslInfoContributor": {
            "notMatched": [
              {
                "condition": "OnEnabledInfoContributorCondition",
                "message": "@ConditionalOnEnabledInfoContributor management.info.ssl.enabled is not true"
              }
            ],
            "matched": []
          },
          "IntegrationGraphEndpointAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.graph.IntegrationGraphServer'"
              }
            ],
            "matched": []
          },
          "DataSourceHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
              }
            ],
            "matched": []
          },
          "JmsHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.jms.ConnectionFactory'"
              }
            ],
            "matched": []
          },
          "LdapHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.LdapOperations'"
              }
            ],
            "matched": []
          },
          "LiquibaseEndpointAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase'"
              }
            ],
            "matched": []
          },
          "OpenTelemetryLoggingAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.opentelemetry.api.OpenTelemetry'"
              }
            ],
            "matched": []
          },
          "OtlpLoggingAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.opentelemetry.api.OpenTelemetry'"
              }
            ],
            "matched": []
          },
          "MailHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.mail.javamail.JavaMailSenderImpl; SearchStrategy: all) did not find any beans of type org.springframework.mail.javamail.JavaMailSenderImpl"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.mail.javamail.JavaMailSenderImpl'"
              },
              {
                "condition": "OnEnabledHealthIndicatorCondition",
                "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
              }
            ]
          },
          "CompositeMeterRegistryConfiguration": {
            "notMatched": [
              {
                "condition": "CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition",
                "message": "NoneNestedConditions 1 matched 1 did not; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.SingleInjectableMeterRegistry @ConditionalOnSingleCandidate (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found a single bean 'simpleMeterRegistry'; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.NoMeterRegistryCondition @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry"
              }
            ],
            "matched": []
          },
          "KafkaMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.kafka.core.ProducerFactory'"
              }
            ],
            "matched": []
          },
          "Log4J2MetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.apache.logging.log4j.core.LoggerContext'"
              }
            ],
            "matched": []
          },
          "MetricsAspectsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.aspectj.weaver.Advice'"
              }
            ],
            "matched": []
          },
          "NoOpMeterRegistryConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry"
              }
            ],
            "matched": []
          },
          "RabbitMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.rabbitmq.client.ConnectionFactory'"
              }
            ],
            "matched": []
          },
          "CacheMeterBinderProvidersConfiguration.Cache2kCacheMeterBinderProviderConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'org.cache2k.Cache2kBuilder', 'org.cache2k.extra.spring.SpringCache2kCache', 'org.cache2k.extra.micrometer.Cache2kCacheMetrics'"
              }
            ],
            "matched": []
          },
          "CacheMeterBinderProvidersConfiguration.HazelcastCacheMeterBinderProviderConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'com.hazelcast.spring.cache.HazelcastCache', 'com.hazelcast.core.Hazelcast'"
              }
            ],
            "matched": []
          },
          "CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'javax.cache.CacheManager'"
              }
            ],
            "matched": []
          },
          "CacheMeterBinderProvidersConfiguration.RedisCacheMeterBinderProviderConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.cache.RedisCache'"
              }
            ],
            "matched": []
          },
          "AppOpticsMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.appoptics.AppOpticsMeterRegistry'"
              }
            ],
            "matched": []
          },
          "AtlasMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.atlas.AtlasMeterRegistry'"
              }
            ],
            "matched": []
          },
          "DatadogMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.datadog.DatadogMeterRegistry'"
              }
            ],
            "matched": []
          },
          "DynatraceMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.dynatrace.DynatraceMeterRegistry'"
              }
            ],
            "matched": []
          },
          "ElasticMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.elastic.ElasticMeterRegistry'"
              }
            ],
            "matched": []
          },
          "GangliaMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.ganglia.GangliaMeterRegistry'"
              }
            ],
            "matched": []
          },
          "GraphiteMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.graphite.GraphiteMeterRegistry'"
              }
            ],
            "matched": []
          },
          "HumioMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.humio.HumioMeterRegistry'"
              }
            ],
            "matched": []
          },
          "InfluxMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.influx.InfluxMeterRegistry'"
              }
            ],
            "matched": []
          },
          "JmxMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.jmx.JmxMeterRegistry'"
              }
            ],
            "matched": []
          },
          "KairosMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.kairos.KairosMeterRegistry'"
              }
            ],
            "matched": []
          },
          "NewRelicMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.newrelic.NewRelicMeterRegistry'"
              }
            ],
            "matched": []
          },
          "OtlpMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.registry.otlp.OtlpMeterRegistry'"
              }
            ],
            "matched": []
          },
          "PrometheusMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.prometheusmetrics.PrometheusMeterRegistry'"
              }
            ],
            "matched": []
          },
          "PrometheusSimpleclientMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.prometheus.PrometheusMeterRegistry'"
              }
            ],
            "matched": []
          },
          "SignalFxMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.signalfx.SignalFxMeterRegistry'"
              }
            ],
            "matched": []
          },
          "StackdriverMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.stackdriver.StackdriverMeterRegistry'"
              }
            ],
            "matched": []
          },
          "StatsdMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.statsd.StatsdMeterRegistry'"
              }
            ],
            "matched": []
          },
          "WavefrontMetricsExportAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.wavefront.sdk.common.WavefrontSender'"
              }
            ],
            "matched": []
          },
          "DataSourcePoolMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: javax.sql.DataSource,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans of type javax.sql.DataSource"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.sql.DataSource', 'io.micrometer.core.instrument.MeterRegistry'"
              }
            ]
          },
          "DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.zaxxer.hikari.HikariDataSource'"
              },
              {
                "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                "message": "Ancestor org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration did not match"
              }
            ],
            "matched": []
          },
          "JerseyServerMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.micrometer.server.ObservationApplicationEventListener'"
              }
            ],
            "matched": []
          },
          "MongoMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.mongodb.MongoClientSettings'"
              }
            ],
            "matched": []
          },
          "HibernateMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.persistence.EntityManagerFactory'"
              }
            ],
            "matched": []
          },
          "ConnectionPoolMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.r2dbc.pool.ConnectionPool'"
              }
            ],
            "matched": []
          },
          "LettuceMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.lettuce.core.metrics.MicrometerCommandLatencyRecorder'"
              }
            ],
            "matched": []
          },
          "JettyMetricsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.server.Server'"
              }
            ],
            "matched": []
          },
          "Neo4jHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
              }
            ],
            "matched": []
          },
          "ObservationAutoConfiguration.MeterObservationHandlerConfiguration.TracingAndMetricsObservationHandlerConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean did not find required type 'io.micrometer.tracing.Tracer'"
              },
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: io.micrometer.tracing.Tracer; SearchStrategy: all) did not find any beans of type io.micrometer.tracing.Tracer"
              }
            ],
            "matched": []
          },
          "ObservationAutoConfiguration.MetricsWithTracingConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
              }
            ],
            "matched": []
          },
          "ObservationAutoConfiguration.ObservedAspectConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.aspectj.weaver.Advice'"
              }
            ],
            "matched": []
          },
          "ObservationAutoConfiguration.OnlyTracingConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
              }
            ],
            "matched": []
          },
          "BatchObservationAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor'"
              }
            ],
            "matched": []
          },
          "GraphQlObservationAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "WebFluxObservationAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'io.micrometer.observation.Observation', 'io.micrometer.core.instrument.MeterRegistry'"
              }
            ]
          },
          "OpenTelemetryAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.opentelemetry.sdk.OpenTelemetrySdk'"
              }
            ],
            "matched": []
          },
          "QuartzEndpointAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.quartz.Scheduler'"
              }
            ],
            "matched": []
          },
          "ConnectionFactoryHealthContributorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
              }
            ],
            "matched": []
          },
          "R2dbcObservationAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.r2dbc.proxy.ProxyConnectionFactory'"
              }
            ],
            "matched": []
          },
          "ReactiveManagementWebSecurityAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
              }
            ],
            "matched": []
          },
          "ManagementWebSecurityAutoConfiguration": {
            "notMatched": [
              {
                "condition": "DefaultWebSecurityCondition",
                "message": "AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) did not find any beans; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass did not find required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity'"
              }
            ],
            "matched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "found 'session' scope"
              }
            ]
          },
          "SecurityRequestMatchersManagementContextConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.web.util.matcher.RequestMatcher'"
              }
            ],
            "matched": []
          },
          "SessionsEndpointAutoConfiguration.ReactiveSessionEndpointConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": []
          },
          "SessionsEndpointAutoConfiguration.ServletSessionEndpointConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.session.SessionRepository; SearchStrategy: all) did not find any beans of type org.springframework.session.SessionRepository"
              }
            ],
            "matched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "found 'session' scope"
              }
            ]
          },
          "BraveAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'brave.Tracer'"
              }
            ],
            "matched": []
          },
          "MicrometerTracingAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
              }
            ],
            "matched": []
          },
          "NoopTracerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
              }
            ],
            "matched": []
          },
          "OpenTelemetryTracingAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.otel.bridge.OtelTracer'"
              }
            ],
            "matched": []
          },
          "OtlpTracingAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.otel.bridge.OtelTracer'"
              }
            ],
            "matched": []
          },
          "PrometheusExemplarsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
              }
            ],
            "matched": []
          },
          "PrometheusSimpleclientExemplarsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.micrometer.tracing.Tracer'"
              }
            ],
            "matched": []
          },
          "WavefrontTracingAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.wavefront.sdk.common.WavefrontSender'"
              }
            ],
            "matched": []
          },
          "ZipkinAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'zipkin2.reporter.Encoding'"
              }
            ],
            "matched": []
          },
          "WavefrontAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.wavefront.sdk.common.application.ApplicationTags'"
              }
            ],
            "matched": []
          },
          "HttpExchangesAutoConfiguration.ReactiveHttpExchangesConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": []
          },
          "JerseySameManagementContextConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
              }
            ],
            "matched": []
          },
          "MappingsEndpointAutoConfiguration.ReactiveWebConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.DispatcherHandler'"
              }
            ]
          },
          "ReactiveManagementContextAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'reactor.core.publisher.Flux'"
              }
            ]
          },
          "ManagementContextAutoConfiguration.DifferentManagementContextConfiguration": {
            "notMatched": [
              {
                "condition": "OnManagementPortCondition",
                "message": "Management Port actual port type (SAME) did not match required type (DIFFERENT)"
              }
            ],
            "matched": []
          },
          "ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration": {
            "notMatched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (management.server.add-application-context-header=true) did not find property 'add-application-context-header'"
              }
            ],
            "matched": []
          },
          "RabbitAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel'"
              }
            ],
            "matched": []
          },
          "AopAutoConfiguration.AspectJAutoProxyingConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.aspectj.weaver.Advice'"
              }
            ],
            "matched": []
          },
          "BatchAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher'"
              }
            ],
            "matched": []
          },
          "Cache2kCacheConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.cache2k.Cache2kBuilder'"
              }
            ],
            "matched": []
          },
          "CacheAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (names: cacheResolver types: org.springframework.cache.CacheManager; SearchStrategy: all) found beans of type 'org.springframework.cache.CacheManager' cacheManager"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'"
              }
            ]
          },
          "CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'"
              },
              {
                "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                "message": "Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match"
              }
            ],
            "matched": []
          },
          "CouchbaseCacheConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
              }
            ],
            "matched": []
          },
          "HazelcastCacheConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
              }
            ],
            "matched": []
          },
          "InfinispanCacheConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.infinispan.spring.embedded.provider.SpringEmbeddedCacheManager'"
              }
            ],
            "matched": []
          },
          "JCacheCacheConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'javax.cache.Caching'"
              }
            ],
            "matched": []
          },
          "RedisCacheConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory'"
              }
            ],
            "matched": []
          },
          "CassandraAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
              }
            ],
            "matched": []
          },
          "MessageSourceAutoConfiguration": {
            "notMatched": [
              {
                "condition": "MessageSourceAutoConfiguration.ResourceBundleCondition",
                "message": "ResourceBundle did not find bundle with basename messages"
              }
            ],
            "matched": []
          },
          "CouchbaseAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
              }
            ],
            "matched": []
          },
          "CassandraDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
              }
            ],
            "matched": []
          },
          "CassandraReactiveDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
              }
            ],
            "matched": []
          },
          "CassandraReactiveRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession'"
              }
            ],
            "matched": []
          },
          "CassandraRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
              }
            ],
            "matched": []
          },
          "CouchbaseDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
              }
            ],
            "matched": []
          },
          "CouchbaseReactiveDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
              }
            ],
            "matched": []
          },
          "CouchbaseReactiveRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
              }
            ],
            "matched": []
          },
          "CouchbaseRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
              }
            ],
            "matched": []
          },
          "ElasticsearchDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.elc.ElasticsearchTemplate'"
              }
            ],
            "matched": []
          },
          "ElasticsearchRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.repository.ElasticsearchRepository'"
              }
            ],
            "matched": []
          },
          "ReactiveElasticsearchRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient'"
              }
            ],
            "matched": []
          },
          "JdbcRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration'"
              }
            ],
            "matched": []
          },
          "JpaRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository'"
              }
            ],
            "matched": []
          },
          "LdapRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository'"
              }
            ],
            "matched": []
          },
          "MongoDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient'"
              }
            ],
            "matched": []
          },
          "MongoReactiveDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
              }
            ],
            "matched": []
          },
          "MongoReactiveRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
              }
            ],
            "matched": []
          },
          "MongoRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient'"
              }
            ],
            "matched": []
          },
          "Neo4jDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
              }
            ],
            "matched": []
          },
          "Neo4jReactiveDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
              }
            ],
            "matched": []
          },
          "Neo4jReactiveRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
              }
            ],
            "matched": []
          },
          "Neo4jRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
              }
            ],
            "matched": []
          },
          "R2dbcDataAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.r2dbc.core.R2dbcEntityTemplate'"
              }
            ],
            "matched": []
          },
          "R2dbcRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
              }
            ],
            "matched": []
          },
          "RedisAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations'"
              }
            ],
            "matched": []
          },
          "RedisReactiveAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory'"
              }
            ],
            "matched": []
          },
          "RedisRepositoriesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories'"
              }
            ],
            "matched": []
          },
          "SpringDataWebAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.data.web.PageableHandlerMethodArgumentResolver; SearchStrategy: all) found beans of type 'org.springframework.data.web.PageableHandlerMethodArgumentResolver' pageableResolver"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'org.springframework.data.web.PageableHandlerMethodArgumentResolver', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'"
              },
              {
                "condition": "OnWebApplicationCondition",
                "message": "found 'session' scope"
              }
            ]
          },
          "ElasticsearchClientAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'co.elastic.clients.elasticsearch.ElasticsearchClient'"
              }
            ],
            "matched": []
          },
          "ElasticsearchRestClientAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClientBuilder'"
              }
            ],
            "matched": []
          },
          "ReactiveElasticsearchClientAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'co.elastic.clients.transport.ElasticsearchTransport'"
              }
            ],
            "matched": []
          },
          "FlywayAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
              }
            ],
            "matched": []
          },
          "FreeMarkerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'freemarker.template.Configuration'"
              }
            ],
            "matched": []
          },
          "GraphQlAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "GraphQlQueryByExampleAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "GraphQlQuerydslAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.querydsl.core.Query'"
              }
            ],
            "matched": []
          },
          "GraphQlReactiveQueryByExampleAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "GraphQlReactiveQuerydslAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.querydsl.core.Query'"
              }
            ],
            "matched": []
          },
          "GraphQlWebFluxAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "GraphQlRSocketAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "RSocketGraphQlClientAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "GraphQlWebFluxSecurityAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "GraphQlWebMvcSecurityAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "GraphQlWebMvcAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
              }
            ],
            "matched": []
          },
          "GroovyTemplateAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine'"
              }
            ],
            "matched": []
          },
          "GsonAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.google.gson.Gson'"
              }
            ],
            "matched": []
          },
          "H2ConsoleAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.h2.server.web.JakartaWebServlet'"
              }
            ],
            "matched": []
          },
          "HypermediaAutoConfiguration.HypermediaConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.hateoas.client.LinkDiscoverers; SearchStrategy: all) found beans of type 'org.springframework.hateoas.client.LinkDiscoverers' linkDiscoverers"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
              }
            ]
          },
          "HazelcastAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
              }
            ],
            "matched": []
          },
          "HazelcastJpaDependencyAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
              }
            ],
            "matched": []
          },
          "GsonHttpMessageConvertersConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.google.gson.Gson'"
              }
            ],
            "matched": []
          },
          "JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper'"
              }
            ],
            "matched": []
          },
          "JsonbHttpMessageConvertersConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.json.bind.Jsonb'"
              }
            ],
            "matched": []
          },
          "IntegrationAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration'"
              }
            ],
            "matched": []
          },
          "DataSourceAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
              }
            ],
            "matched": []
          },
          "DataSourceTransactionManagerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
              }
            ],
            "matched": []
          },
          "JdbcClientAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnSingleCandidate did not find required type 'org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate'"
              }
            ],
            "matched": []
          },
          "JdbcTemplateAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
              }
            ],
            "matched": []
          },
          "JndiDataSourceAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
              }
            ],
            "matched": []
          },
          "XADataSourceAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.transaction.TransactionManager'"
              }
            ],
            "matched": []
          },
          "JerseyAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider'"
              }
            ],
            "matched": []
          },
          "JmsAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.jms.Message'"
              }
            ],
            "matched": []
          },
          "JndiConnectionFactoryAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate'"
              }
            ],
            "matched": []
          },
          "ActiveMQAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.jms.ConnectionFactory'"
              }
            ],
            "matched": []
          },
          "ArtemisAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.jms.ConnectionFactory'"
              }
            ],
            "matched": []
          },
          "JooqAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.jooq.DSLContext'"
              }
            ],
            "matched": []
          },
          "JsonbAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.json.bind.Jsonb'"
              }
            ],
            "matched": []
          },
          "KafkaAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate'"
              }
            ],
            "matched": []
          },
          "LdapAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource'"
              }
            ],
            "matched": []
          },
          "EmbeddedLdapAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer'"
              }
            ],
            "matched": []
          },
          "LiquibaseAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange'"
              }
            ],
            "matched": []
          },
          "MailSenderAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.activation.MimeType'"
              }
            ],
            "matched": []
          },
          "MailSenderValidatorAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.mail.test-connection) did not find property 'test-connection'"
              }
            ],
            "matched": []
          },
          "MongoAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient'"
              }
            ],
            "matched": []
          },
          "MongoReactiveAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
              }
            ],
            "matched": []
          },
          "MustacheAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache'"
              }
            ],
            "matched": []
          },
          "Neo4jAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
              }
            ],
            "matched": []
          },
          "HibernateJpaAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.persistence.EntityManager'"
              }
            ],
            "matched": []
          },
          "PulsarAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.apache.pulsar.client.api.PulsarClient'"
              }
            ],
            "matched": []
          },
          "PulsarReactiveAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.apache.pulsar.client.api.PulsarClient'"
              }
            ],
            "matched": []
          },
          "QuartzAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.quartz.Scheduler'"
              }
            ],
            "matched": []
          },
          "R2dbcAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
              }
            ],
            "matched": []
          },
          "R2dbcProxyAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.r2dbc.proxy.ProxyConnectionFactory'"
              }
            ],
            "matched": []
          },
          "R2dbcTransactionManagerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.r2dbc.connection.R2dbcTransactionManager'"
              }
            ],
            "matched": []
          },
          "RSocketMessagingAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.rsocket.RSocket'"
              }
            ],
            "matched": []
          },
          "RSocketRequesterAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.rsocket.RSocket'"
              }
            ],
            "matched": []
          },
          "RSocketServerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.rsocket.core.RSocketServer'"
              }
            ],
            "matched": []
          },
          "RSocketStrategiesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.rsocket.RSocket'"
              }
            ],
            "matched": []
          },
          "ReactiveOAuth2ClientAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
              }
            ],
            "matched": []
          },
          "OAuth2ClientAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity'"
              }
            ],
            "matched": []
          },
          "ReactiveOAuth2ResourceServerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
              }
            ],
            "matched": []
          },
          "OAuth2ResourceServerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken'"
              }
            ],
            "matched": []
          },
          "OAuth2AuthorizationServerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.authorization.OAuth2Authorization'"
              }
            ],
            "matched": []
          },
          "OAuth2AuthorizationServerJwtAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.authorization.OAuth2Authorization'"
              }
            ],
            "matched": []
          },
          "ReactiveSecurityAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
              }
            ],
            "matched": []
          },
          "ReactiveUserDetailsServiceAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager'"
              }
            ],
            "matched": []
          },
          "RSocketSecurityAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
              }
            ],
            "matched": []
          },
          "Saml2RelyingPartyAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository'"
              }
            ],
            "matched": []
          },
          "SecurityAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher'"
              }
            ],
            "matched": []
          },
          "SecurityFilterAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.http.SessionCreationPolicy'"
              }
            ],
            "matched": []
          },
          "UserDetailsServiceAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager'"
              }
            ],
            "matched": []
          },
          "SendGridAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.sendgrid.SendGrid'"
              }
            ],
            "matched": []
          },
          "HazelcastSessionConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.session.hazelcast.HazelcastIndexedSessionRepository'"
              }
            ],
            "matched": []
          },
          "JdbcSessionConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.session.jdbc.JdbcIndexedSessionRepository'"
              }
            ],
            "matched": []
          },
          "MongoSessionConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'org.springframework.data.mongodb.core.MongoOperations', 'org.springframework.session.data.mongo.MongoIndexedSessionRepository'"
              }
            ],
            "matched": []
          },
          "RedisSessionConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'org.springframework.data.redis.core.RedisTemplate', 'org.springframework.session.data.redis.RedisIndexedSessionRepository'"
              }
            ],
            "matched": []
          },
          "SessionAutoConfiguration.ReactiveSessionConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": []
          },
          "SessionAutoConfiguration.ServletSessionConfiguration.RememberMeServicesConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.security.web.authentication.RememberMeServices'"
              }
            ],
            "matched": []
          },
          "SessionRepositoryFilterConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.session.web.http.SessionRepositoryFilter; SearchStrategy: all) did not find any beans of type org.springframework.session.web.http.SessionRepositoryFilter"
              }
            ],
            "matched": []
          },
          "DataSourceInitializationConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.init.DatabasePopulator'"
              }
            ],
            "matched": []
          },
          "R2dbcInitializationConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'io.r2dbc.spi.ConnectionFactory', 'org.springframework.r2dbc.connection.init.DatabasePopulator'"
              }
            ],
            "matched": []
          },
          "TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration#simpleAsyncTaskExecutorBuilderVirtualThreads": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.SimpleAsyncTaskExecutorBuilder; SearchStrategy: all) found beans of type 'org.springframework.boot.task.SimpleAsyncTaskExecutorBuilder' simpleAsyncTaskExecutorBuilder"
              }
            ],
            "matched": []
          },
          "TaskExecutorConfigurations.TaskExecutorConfiguration#applicationTaskExecutorVirtualThreads": {
            "notMatched": [
              {
                "condition": "OnThreadingCondition",
                "message": "@ConditionalOnThreading did not find VIRTUAL"
              }
            ],
            "matched": []
          },
          "TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration#simpleAsyncTaskSchedulerBuilderVirtualThreads": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder; SearchStrategy: all) found beans of type 'org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder' simpleAsyncTaskSchedulerBuilder"
              }
            ],
            "matched": []
          },
          "TaskSchedulingConfigurations.TaskSchedulerConfiguration#taskSchedulerVirtualThreads": {
            "notMatched": [
              {
                "condition": "OnThreadingCondition",
                "message": "@ConditionalOnThreading did not find VIRTUAL"
              }
            ],
            "matched": []
          },
          "TemplateEngineConfigurations.ReactiveTemplateEngineConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": []
          },
          "ThymeleafAutoConfiguration.DataAttributeDialectConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect'"
              }
            ],
            "matched": []
          },
          "ThymeleafAutoConfiguration.ThymeleafSecurityDialectConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'org.thymeleaf.extras.springsecurity6.dialect.SpringSecurityDialect', 'org.springframework.security.web.server.csrf.CsrfToken'"
              }
            ],
            "matched": []
          },
          "ThymeleafAutoConfiguration.ThymeleafWebFluxConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": []
          },
          "ThymeleafAutoConfiguration.ThymeleafWebLayoutConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'nz.net.ultraq.thymeleaf.layoutdialect.LayoutDialect'"
              }
            ],
            "matched": []
          },
          "ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration#resourceUrlEncodingFilter": {
            "notMatched": [
              {
                "condition": "OnEnabledResourceChainCondition",
                "message": "@ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarVersionLocator"
              }
            ],
            "matched": []
          },
          "TransactionAutoConfiguration#transactionalOperator": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnSingleCandidate (types: org.springframework.transaction.ReactiveTransactionManager; SearchStrategy: all) did not find any beans"
              }
            ],
            "matched": []
          },
          "TransactionAutoConfiguration.AspectJTransactionManagementConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean did not find required type 'org.springframework.transaction.aspectj.AbstractTransactionAspect'"
              },
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.transaction.aspectj.AbstractTransactionAspect; SearchStrategy: all) did not find any beans of type org.springframework.transaction.aspectj.AbstractTransactionAspect"
              }
            ],
            "matched": []
          },
          "TransactionAutoConfiguration.EnableTransactionManagementConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) did not find any beans of type org.springframework.transaction.TransactionManager"
              }
            ],
            "matched": []
          },
          "TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration": {
            "notMatched": [
              {
                "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                "message": "Ancestor org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration did not match"
              }
            ],
            "matched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=true) matched"
              }
            ]
          },
          "TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration": {
            "notMatched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class'"
              },
              {
                "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                "message": "Ancestor org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration did not match"
              }
            ],
            "matched": []
          },
          "TransactionAutoConfiguration.TransactionTemplateConfiguration": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnSingleCandidate (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) did not find any beans"
              }
            ],
            "matched": []
          },
          "JtaAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.transaction.Transaction'"
              }
            ],
            "matched": []
          },
          "ValidationAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'jakarta.validation.executable.ExecutableValidator'"
              }
            ],
            "matched": []
          },
          "EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.ee10.webapp.WebAppContext'"
              }
            ],
            "matched": []
          },
          "EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration#tomcatVirtualThreadsProtocolHandlerCustomizer": {
            "notMatched": [
              {
                "condition": "OnThreadingCondition",
                "message": "@ConditionalOnThreading did not find VIRTUAL"
              }
            ],
            "matched": []
          },
          "EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
              }
            ],
            "matched": []
          },
          "HttpHandlerAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'org.springframework.web.reactive.DispatcherHandler', 'org.springframework.http.server.reactive.HttpHandler'"
              }
            ]
          },
          "ReactiveMultipartAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'org.springframework.http.codec.multipart.DefaultPartHttpMessageReader', 'org.springframework.web.reactive.config.WebFluxConfigurer'"
              }
            ]
          },
          "ReactiveWebServerFactoryAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.http.ReactiveHttpInputMessage'"
              }
            ]
          },
          "WebFluxAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
              }
            ]
          },
          "WebSessionIdResolverAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'org.springframework.web.server.session.WebSessionManager', 'reactor.core.publisher.Mono'"
              }
            ]
          },
          "ErrorWebFluxAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
              }
            ]
          },
          "ClientHttpConnectorFactoryConfiguration.HttpClient5": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'org.apache.hc.client5.http.impl.async.HttpAsyncClients', 'org.apache.hc.core5.http.nio.AsyncRequestProducer', 'org.apache.hc.core5.reactive.ReactiveResponseConsumer'"
              }
            ],
            "matched": []
          },
          "ClientHttpConnectorFactoryConfiguration.JdkClient": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactory; SearchStrategy: all) found beans of type 'org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactory' reactorClientHttpConnectorFactory"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'java.net.http.HttpClient'"
              }
            ]
          },
          "DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans of type org.springframework.web.multipart.MultipartResolver"
              }
            ],
            "matched": []
          },
          "ServletWebServerFactoryAutoConfiguration.ForwardedHeaderFilterConfiguration": {
            "notMatched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (server.forward-headers-strategy=framework) did not find property 'server.forward-headers-strategy'"
              }
            ],
            "matched": []
          },
          "ServletWebServerFactoryConfiguration.EmbeddedJetty": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.ee10.webapp.WebAppContext'"
              }
            ],
            "matched": []
          },
          "ServletWebServerFactoryConfiguration.EmbeddedUndertow": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
              }
            ],
            "matched": []
          },
          "WebMvcAutoConfiguration#hiddenHttpMethodFilter": {
            "notMatched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.mvc.hiddenmethod.filter.enabled) did not find property 'enabled'"
              }
            ],
            "matched": []
          },
          "WebMvcAutoConfiguration.ProblemDetailsErrorHandlingConfiguration": {
            "notMatched": [
              {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.mvc.problemdetails.enabled=true) did not find property 'enabled'"
              }
            ],
            "matched": []
          },
          "WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration": {
            "notMatched": [
              {
                "condition": "OnEnabledResourceChainCondition",
                "message": "@ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarVersionLocator"
              }
            ],
            "matched": []
          },
          "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver": {
            "notMatched": [
              {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) found beans of type 'org.springframework.web.servlet.view.BeanNameViewResolver' beanNameViewResolver"
              }
            ],
            "matched": []
          },
          "WebServicesAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet'"
              }
            ],
            "matched": []
          },
          "WebServiceTemplateAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller'"
              }
            ],
            "matched": []
          },
          "WebSocketReactiveAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnWebApplicationCondition",
                "message": "not a reactive web application"
              }
            ],
            "matched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'jakarta.websocket.server.ServerContainer'"
              }
            ]
          },
          "WebSocketMessagingAutoConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer'"
              }
            ],
            "matched": []
          },
          "WebSocketServletAutoConfiguration.JettyWebSocketConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.ee10.websocket.jakarta.server.config.JakartaWebSocketServletContainerInitializer'"
              }
            ],
            "matched": []
          },
          "WebSocketServletAutoConfiguration.UndertowWebSocketConfiguration": {
            "notMatched": [
              {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap'"
              }
            ],
            "matched": []
          }
        },
        "unconditionalClasses": [
          "org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration",
          "org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration",
          "org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration",
          "org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration",
          "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration",
          "org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration",
          "org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration",
          "org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration",
          "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration",
          "org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration",
          "org.springframework.boot.actuate.autoconfigure.endpoint.jackson.JacksonEndpointAutoConfiguration",
          "org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration",
          "org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration"
        ]
      }
    }
  }